from datetime import datetime
from langchain.agents import initialize_agent, Tool
from langchain_groq import ChatGroq
from dotenv import load_dotenv
import os
import json
from .database import db
from .config import GROQ_API_KEY, GROQ_MODEL

# ============================================================
# Load bi·∫øn m√¥i tr∆∞·ªùng
# ============================================================
load_dotenv()

# ============================================================
# MongoDB Collections
# ============================================================
transactions = db["transactions"]
tasks = db["tasks"]
inventories = db["inventories"]

# ============================================================
# INVENTORIES
# ============================================================
def get_stock_by_sku(sku: str) -> str:
    pipeline = [
        {"$match": {"sku": sku}},
        {"$group": {
            "_id": "$sku",
            "inbound": {"$sum": {"$cond": [{"$eq": ["$type", "inbound"]}, "$qty", 0]}},
            "outbound": {"$sum": {"$cond": [{"$eq": ["$type", "outbound"]}, "$qty", 0]}}
        }},
        {"$project": {"sku": "$_id", "stock": {"$subtract": ["$inbound", "$outbound"]}}}
    ]
    result = list(transactions.aggregate(pipeline))
    if result:
        new_qty = result[0]['stock']
        inventories.update_one(
            {"sku": sku},
            {"$set": {"qty": new_qty, "updatedAt": datetime.utcnow()}}
        )
        item = inventories.find_one({"sku": sku})
        uom = item.get("uom", "s·∫£n ph·∫©m") if item else "s·∫£n ph·∫©m"
        return f"üì¶ SKU {sku} hi·ªán c√≤n {new_qty} {uom} trong kho."
    else:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y SKU {sku} trong transaction log."

def get_stock_by_name(name: str) -> str:
    item = inventories.find_one({"name": name})
    if not item:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m '{name}' trong kho."
    return get_stock_by_sku(item["sku"])

def search_inventories(args: str) -> str:
    try:
        params = json.loads(args)
    except Exception as e:
        return f"‚ùå L·ªói parse input: {e}"
    query = {}
    if "sku" in params: query["sku"] = params["sku"]
    if "name" in params: query["name"] = {"$regex": params["name"], "$options": "i"}
    if "wh" in params: query["wh"] = params["wh"]
    cursor = inventories.find(query).limit(int(params.get("limit", 10)))
    items = [f"{i['sku']} - {i['name']} ({i['qty']} {i['uom']} t·∫°i {i['wh']})" for i in cursor]
    return "\n".join(items) if items else "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o."

# ============================================================
# TRANSACTIONS
# ============================================================
def get_transaction_history(sku: str, limit: int = 5) -> str:
    cursor = transactions.find({"sku": sku}).sort("at", -1).limit(limit)
    logs = []
    for t in cursor:
        logs.append(
            f"{t['at'].strftime('%Y-%m-%d %H:%M:%S')} - {t['type']} {t['qty']} "
            f"(by {t['by']}, wh: {t['wh']}, note: {t.get('note','')})"
        )
    return "\n".join(logs) if logs else f"‚ùå Kh√¥ng c√≥ giao d·ªãch n√†o cho {sku}."

def add_inbound_transaction(sku: str, qty: int, wh: str, by: str, note: str = "") -> str:
    doc = {"sku": sku, "type": "inbound", "qty": int(qty), "wh": wh,
           "at": datetime.utcnow(), "by": by, "note": note}
    transactions.insert_one(doc)
    get_stock_by_sku(sku)
    return f"‚úÖ ƒê√£ ghi nh·∫≠n nh·∫≠p {qty} s·∫£n ph·∫©m (SKU {sku}) v√†o kho {wh} b·ªüi {by}."

def add_outbound_transaction(sku: str, qty: int, wh: str, by: str, note: str = "") -> str:
    doc = {"sku": sku, "type": "outbound", "qty": int(qty), "wh": wh,
           "at": datetime.utcnow(), "by": by, "note": note}
    transactions.insert_one(doc)
    get_stock_by_sku(sku)
    return f"‚úÖ ƒê√£ ghi nh·∫≠n xu·∫•t {qty} s·∫£n ph·∫©m (SKU {sku}) t·ª´ kho {wh} b·ªüi {by}."

def search_transactions(args: str) -> str:
    try:
        params = json.loads(args)
    except Exception as e:
        return f"‚ùå L·ªói parse input: {e}"
    query = {}
    if "by" in params: query["by"] = params["by"]
    if "wh" in params: query["wh"] = params["wh"]
    if "sku" in params: query["sku"] = params["sku"]
    cursor = transactions.find(query).sort("at", -1).limit(int(params.get("limit", 10)))
    logs = [f"{t['at'].strftime('%Y-%m-%d %H:%M:%S')} - {t['sku']} - {t['type']} {t['qty']} "
            f"(by {t['by']}, wh: {t['wh']}, note: {t.get('note','')})" for t in cursor]
    return "\n".join(logs) if logs else "‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch ph√π h·ª£p."

# ============================================================
# TASKS
# ============================================================
def get_open_tasks(limit: int = 10) -> str:
    cursor = tasks.find({"status": "open"}).sort("created_at", -1).limit(limit)
    items = [f"{t['_id']} - {t['type']} (sku={t['payload'].get('sku')}, wh={t['payload'].get('wh')})"
             for t in cursor]
    return "\n".join(items) if items else "‚ùå Kh√¥ng c√≥ task n√†o ƒëang m·ªü."

def assign_task(args: str) -> str:
    try:
        params = json.loads(args)
        task_id = params["task_id"]
        assignee = params["assignee"]
    except Exception as e:
        return f"‚ùå Input ph·∫£i c√≥ task_id v√† assignee. L·ªói: {e}"
    result = tasks.update_one({"_id": task_id}, {"$set": {"assignee": assignee}})
    return "‚úÖ ƒê√£ g√°n task." if result.modified_count else "‚ùå Kh√¥ng t√¨m th·∫•y task."

def complete_task(task_id: str) -> str:
    if not task_id:
        return "‚ùå Thi·∫øu task_id. H√£y cung c·∫•p ID task c·∫ßn ho√†n th√†nh."
    result = tasks.update_one({"_id": task_id}, {"$set": {"status": "done"}})
    return "‚úÖ Task ƒë√£ ho√†n th√†nh." if result.modified_count else "‚ùå Kh√¥ng t√¨m th·∫•y task."

def search_tasks(args: str) -> str:
    try:
        params = json.loads(args)
    except Exception as e:
        return f"‚ùå L·ªói parse input: {e}"
    query = {}
    if "sku" in params: query["payload.sku"] = params["sku"]
    if "wh" in params: query["payload.wh"] = params["wh"]
    if "assignee" in params: query["assignee"] = params["assignee"]
    cursor = tasks.find(query).limit(int(params.get("limit", 10)))
    items = [f"{t['_id']} - {t['type']} ({t['status']}, sku={t['payload'].get('sku')})"
             for t in cursor]
    return "\n".join(items) if items else "‚ùå Kh√¥ng t√¨m th·∫•y task n√†o."

# ============================================================
# WRAPPER (H·ªèi l·∫°i khi thi·∫øu input)
# ============================================================
def stock_tool(args: str) -> str:
    sku = args.strip()
    if not sku:
        return "üì¶ B·∫°n mu·ªën ki·ªÉm tra t·ªìn kho c·ªßa s·∫£n ph·∫©m n√†o? H√£y nh·∫≠p m√£ SKU."
    return get_stock_by_sku(sku)

def transaction_history_tool(args: str) -> str:
    sku = args.strip()
    if not sku:
        return "üìú B·∫°n mu·ªën xem l·ªãch s·ª≠ giao d·ªãch c·ªßa s·∫£n ph·∫©m n√†o? H√£y nh·∫≠p m√£ SKU."
    return get_transaction_history(sku)

def inbound_tool_wrapper(args: str) -> str:
    if not args.strip():
        return "üì• B·∫°n mu·ªën nh·∫≠p kho cho s·∫£n ph·∫©m n√†o? Format: sku,qty,wh,by,note"
    return add_inbound_transaction(*[p.strip() for p in args.split(",")[:4]])

def outbound_tool_wrapper(args: str) -> str:
    if not args.strip():
        return "üì§ B·∫°n mu·ªën xu·∫•t kho cho s·∫£n ph·∫©m n√†o? Format: sku,qty,wh,by,note"
    return add_outbound_transaction(*[p.strip() for p in args.split(",")[:4]])

def complete_task_wrapper(args: str) -> str:
    task_id = args.strip()
    if not task_id:
        return "üìù B·∫°n mu·ªën ho√†n th√†nh task n√†o? H√£y nh·∫≠p task_id."
    return complete_task(task_id)

# ============================================================
# Kh·ªüi t·∫°o Tools
# ============================================================
tools = [
    # Inventories
    Tool(
        name="MongoDBStockBySKU",
        func=get_stock_by_sku,
        description="D√πng khi ng∆∞·ªùi d√πng cung c·∫•p r√µ m√£ SKU. Tr·∫£ v·ªÅ t·ªìn kho hi·ªán t·∫°i c·ªßa SKU ƒë√≥ t·ª´ MongoDB."
    ),
    Tool(
        name="MongoDBStockByName",
        func=get_stock_by_name,
        description="D√πng khi ng∆∞·ªùi d√πng ch·ªâ nh·ªõ ho·∫∑c nh·∫≠p t√™n s·∫£n ph·∫©m. T√¨m SKU theo t√™n, sau ƒë√≥ tr·∫£ v·ªÅ t·ªìn kho."
    ),
    Tool(
        name="MongoDBInventorySearcher",
        func=search_inventories,
        description="T√¨m ki·∫øm nhi·ªÅu s·∫£n ph·∫©m trong kho. Input ph·∫£i l√† JSON, c√≥ th·ªÉ g·ªìm: "
                    '{"sku": "...", "name": "...", "wh": "...", "limit": N}. '
                    "Tr·∫£ v·ªÅ danh s√°ch SKU, t√™n, s·ªë l∆∞·ª£ng t·ªìn v√† kho l∆∞u tr·ªØ."
    ),
    Tool(
        name="MongoDBStockCheckerWrapper",
        func=stock_tool,
        description="D√πng khi ng∆∞·ªùi d√πng h·ªèi chung chung v·ªÅ t·ªìn kho nh∆∞ng ch∆∞a nh·∫≠p SKU. "
                    "Tool s·∫Ω h·ªèi l·∫°i user ƒë·ªÉ l·∫•y SKU."
    ),
    
    # Transactions
    Tool(
        name="MongoDBTransactionHistory",
        func=get_transaction_history,
        description="D√πng khi user nh·∫≠p SKU v√† mu·ªën xem l·ªãch s·ª≠ giao d·ªãch g·∫ßn ƒë√¢y. "
                    "Tr·∫£ v·ªÅ danh s√°ch inbound/outbound c·ªßa SKU."
    ),
    Tool(
        name="MongoDBTransactionHistoryWrapper",
        func=transaction_history_tool,
        description="D√πng khi user mu·ªën xem l·ªãch s·ª≠ giao d·ªãch nh∆∞ng ch∆∞a nh·∫≠p SKU. "
                    "Tool s·∫Ω h·ªèi l·∫°i user ƒë·ªÉ b·ªï sung SKU."
    ),
    Tool(
        name="MongoDBInboundRecorderWrapper",
        func=inbound_tool_wrapper,
        description="D√πng ƒë·ªÉ ghi nh·∫≠n giao d·ªãch nh·∫≠p kho (inbound). Input format: sku,qty,wh,by,note. "
                    "N·∫øu thi·∫øu tham s·ªë s·∫Ω h·ªèi l·∫°i user."
    ),
    Tool(
        name="MongoDBOutboundRecorderWrapper",
        func=outbound_tool_wrapper,
        description="D√πng ƒë·ªÉ ghi nh·∫≠n giao d·ªãch xu·∫•t kho (outbound). Input format: sku,qty,wh,by,note. "
                    "N·∫øu thi·∫øu tham s·ªë s·∫Ω h·ªèi l·∫°i user."
    ),
    Tool(
        name="MongoDBTransactionSearcher",
        func=search_transactions,
        description="D√πng khi c·∫ßn l·ªçc nhi·ªÅu giao d·ªãch. Input l√† JSON c√≥ th·ªÉ g·ªìm: "
                    '{"sku": "...", "wh": "...", "by": "...", "limit": N}. '
                    "Tr·∫£ v·ªÅ danh s√°ch giao d·ªãch ph√π h·ª£p."
    ),

    # Tasks
    Tool(name="MongoDBOpenTasks", func=get_open_tasks, description="Danh s√°ch task ƒëang m·ªü."),
    Tool(name="MongoDBTaskAssigner", func=assign_task, description="G√°n ng∆∞·ªùi th·ª±c hi·ªán cho task."),
    Tool(name="MongoDBTaskCompleterWrapper", func=complete_task_wrapper, description="ƒê√°nh d·∫•u task ho√†n th√†nh, n·∫øu thi·∫øu task_id th√¨ h·ªèi l·∫°i."),
    Tool(name="MongoDBTaskSearcher", func=search_tasks, description="T√¨m ki·∫øm task theo ti√™u ch√≠."),
]


# ============================================================
# Kh·ªüi t·∫°o LLM & Agent
# ============================================================
llm = ChatGroq(model=GROQ_MODEL, groq_api_key=GROQ_API_KEY, temperature=0)

agent = initialize_agent(
    tools,
    llm,
    agent="chat-zero-shot-react-description",
    verbose=True,
    handle_parsing_errors=True,
    return_intermediate_steps=False,
    agent_kwargs={
        "prefix": "B·∫°n l√† tr·ª£ l√Ω qu·∫£n l√Ω kho. Lu√¥n d√πng tool MongoDB ƒë·ªÉ tr·∫£ l·ªùi. "
                  "Kh√¥ng b·ªãa ra th√¥ng tin. N·∫øu thi·∫øu d·ªØ li·ªáu, h√£y h·ªèi l·∫°i user."
    }
)



print("‚úÖ Agent ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")
