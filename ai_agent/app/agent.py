from datetime import datetime
from langchain.agents import initialize_agent, Tool
from langchain_groq import ChatGroq
from dotenv import load_dotenv
import os
import json
from .database import db
from .config import GROQ_API_KEY, GROQ_MODEL

# ============================================================
# Load bi·∫øn m√¥i tr∆∞·ªùng
# ============================================================
load_dotenv()

# ============================================================
# MongoDB Collections
# ============================================================
transactions = db["transactions"]
tasks = db["tasks"]
inventories = db["inventories"]

# ============================================================
# Tool 1: T√≠nh t·ªìn kho hi·ªán t·∫°i theo SKU (v√† update inventories)
# ============================================================
def get_stock_by_sku(sku: str) -> str:
    pipeline = [
        {"$match": {"sku": sku}},
        {"$group": {
            "_id": "$sku",
            "inbound": {"$sum": {"$cond": [{"$eq": ["$type", "inbound"]}, "$qty", 0]}},
            "outbound": {"$sum": {"$cond": [{"$eq": ["$type", "outbound"]}, "$qty", 0]}}
        }},
        {"$project": {
            "sku": "$_id",
            "stock": {"$subtract": ["$inbound", "$outbound"]}
        }}
    ]
    result = list(transactions.aggregate(pipeline))
    if result:
        new_qty = result[0]['stock']
        inventories.update_one(
            {"sku": sku},
            {"$set": {"qty": new_qty, "updatedAt": datetime.utcnow()}}
        )
        item = inventories.find_one({"sku": sku})
        uom = item.get("uom", "s·∫£n ph·∫©m") if item else "s·∫£n ph·∫©m"
        return f"üì¶ SKU {sku} hi·ªán c√≤n {new_qty} {uom} trong kho."
    else:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y SKU {sku} trong transaction log."

# ============================================================
# Tool 1b: T√≠nh t·ªìn kho theo t√™n (v√† update inventories)
# ============================================================
def get_stock_by_name(name: str) -> str:
    item = inventories.find_one({"name": name})
    if not item:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m '{name}' trong kho."
    sku = item["sku"]

    pipeline = [
        {"$match": {"sku": sku}},
        {"$group": {
            "_id": "$sku",
            "inbound": {"$sum": {"$cond": [{"$eq": ["$type", "inbound"]}, "$qty", 0]}},
            "outbound": {"$sum": {"$cond": [{"$eq": ["$type", "outbound"]}, "$qty", 0]}}
        }},
        {"$project": {
            "sku": "$_id",
            "stock": {"$subtract": ["$inbound", "$outbound"]}
        }}
    ]
    result = list(transactions.aggregate(pipeline))
    if result:
        new_qty = result[0]["stock"]
        inventories.update_one(
            {"sku": sku},
            {"$set": {"qty": new_qty, "updatedAt": datetime.utcnow()}}
        )
        return f"üì¶ S·∫£n ph·∫©m '{name}' (SKU: {sku}) hi·ªán c√≤n {new_qty} {item['uom']} trong kho."
    else:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y transaction log cho s·∫£n ph·∫©m '{name}' (SKU: {sku})."

# ============================================================
# Tool 2: L·∫•y l·ªãch s·ª≠ giao d·ªãch g·∫ßn nh·∫•t
# ============================================================
def get_transaction_history(sku: str, limit: int = 5) -> str:
    cursor = transactions.find({"sku": sku}).sort("at", -1).limit(limit)
    logs = []
    for t in cursor:
        logs.append(
            f"{t['at'].strftime('%Y-%m-%d %H:%M:%S')} - {t['type']} {t['qty']} "
            f"(by {t['by']}, wh: {t['wh']}, note: {t.get('note','')})"
        )
    return "\n".join(logs) if logs else f"‚ùå Kh√¥ng c√≥ giao d·ªãch n√†o cho {sku}."

# ============================================================
# Tool 3: Ghi nh·∫≠n inbound (c·∫≠p nh·∫≠t inventories lu√¥n)
# ============================================================
def add_inbound_transaction(sku: str, qty: int, wh: str, by: str, note: str = "") -> str:
    doc = {"sku": sku, "type": "inbound", "qty": int(qty), "wh": wh,
           "at": datetime.utcnow(), "by": by, "note": note}
    transactions.insert_one(doc)
    # Sau khi insert ‚Üí c·∫≠p nh·∫≠t l·∫°i t·ªìn kho
    get_stock_by_sku(sku)
    return f"‚úÖ ƒê√£ ghi nh·∫≠n nh·∫≠p {qty} s·∫£n ph·∫©m (SKU {sku}) v√†o kho {wh} b·ªüi {by}."

# ============================================================
# Tool 4: Ghi nh·∫≠n outbound (c·∫≠p nh·∫≠t inventories lu√¥n)
# ============================================================
def add_outbound_transaction(sku: str, qty: int, wh: str, by: str, note: str = "") -> str:
    doc = {"sku": sku, "type": "outbound", "qty": int(qty), "wh": wh,
           "at": datetime.utcnow(), "by": by, "note": note}
    transactions.insert_one(doc)
    # Sau khi insert ‚Üí c·∫≠p nh·∫≠t l·∫°i t·ªìn kho
    get_stock_by_sku(sku)
    return f"‚úÖ ƒê√£ ghi nh·∫≠n xu·∫•t {qty} s·∫£n ph·∫©m (SKU {sku}) t·ª´ kho {wh} b·ªüi {by}."

# ============================================================
# Tool 5 & 6: Wrapper inbound / outbound
# ============================================================


def inbound_tool_wrapper(args: str) -> str:
    try:
        # N·∫øu l√† JSON string
        if args.strip().startswith("{"):
            data = json.loads(args)
            sku = data["sku"]
            qty = int(data["qty"])
            wh = data["wh"]
            by = data["by"]
            note = data.get("note", "")
            return add_inbound_transaction(sku, qty, wh, by, note)

        # N·∫øu l√† CSV string
        parts = [p.strip() for p in args.split(",")]
        if len(parts) >= 4:
            sku, qty, wh, by = parts[:4]
            note = parts[4] if len(parts) > 4 else ""
            return add_inbound_transaction(sku, int(qty), wh, by, note)

        # N·∫øu l√† ti·∫øng Vi·ªát t·ª± nhi√™n ‚Üí regex parse
        match = re.search(r"(Nh·∫≠p kho\s+(\d+)\s+c√°i\s+SKU\s+(\w+)\s+v√†o\s+kho\s+(\w+)\s+b·ªüi\s+(\w+)(?:,\s*ghi ch√∫\s*(.*))?", args, re.IGNORECASE)
        if match:
            qty, sku, wh, by, note = match.groups()
            return add_inbound_transaction(sku, int(qty), wh, by, note or "")

        return "‚ùå Kh√¥ng hi·ªÉu d·ªØ li·ªáu nh·∫≠p kho."
    except Exception as e:
        return f"‚ùå L·ªói x·ª≠ l√Ω inbound: {e}"

def outbound_tool_wrapper(args: str) -> str:
    try:
        # N·∫øu l√† JSON string
        if args.strip().startswith("{"):
            data = json.loads(args)
            sku = data["sku"]
            qty = int(data["qty"])
            wh = data["wh"]
            by = data["by"]
            note = data.get("note", "")
            return add_inbound_transaction(sku, qty, wh, by, note)

        # N·∫øu l√† CSV string
        parts = [p.strip() for p in args.split(",")]
        if len(parts) >= 4:
            sku, qty, wh, by = parts[:4]
            note = parts[4] if len(parts) > 4 else ""
            return add_outbound_transaction(sku, int(qty), wh, by, note)

        # N·∫øu l√† ti·∫øng Vi·ªát t·ª± nhi√™n ‚Üí regex parse
        match = re.search(r"(Xu·∫•t kho\s+(\d+)\s+c√°i\s+SKU\s+(\w+)\s+v√†o\s+kho\s+(\w+)\s+b·ªüi\s+(\w+)(?:,\s*ghi ch√∫\s*(.*))?", args, re.IGNORECASE)
        if match:
            qty, sku, wh, by, note = match.groups()
            return add_outbound_transaction(sku, int(qty), wh, by, note or "")

        return "‚ùå Kh√¥ng hi·ªÉu d·ªØ li·ªáu nh·∫≠p kho."
    except Exception as e:
        return f"‚ùå L·ªói x·ª≠ l√Ω inbound: {e}"

# ============================================================
# Tool 7: T√¨m ki·∫øm transactions
# ============================================================
def search_transactions(by: str = None, wh: str = None, sku: str = None, limit: int = 10) -> str:
    query = {}
    if by: query["by"] = by
    if wh: query["wh"] = wh
    if sku: query["sku"] = sku
    cursor = transactions.find(query).sort("at", -1).limit(limit)
    logs = []
    for t in cursor:
        logs.append(f"{t['at'].strftime('%Y-%m-%d %H:%M:%S')} - {t['sku']} - {t['type']} {t['qty']} "
                    f"(by {t['by']}, wh: {t['wh']}, note: {t.get('note','')})")
    return "\n".join(logs) if logs else "‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch ph√π h·ª£p."

def search_transactions_tool(args: str) -> str:
    try:
        params = json.loads(args)
    except Exception as e:
        return f"‚ùå L·ªói parse input: {e}"
    return search_transactions(by=params.get("by"),
                               wh=params.get("wh"),
                               sku=params.get("sku"),
                               limit=int(params.get("limit", 10)))

# ============================================================
# Tool 8: Rebuild inventory to√†n b·ªô (update inventories)
# ============================================================
def rebuild_inventory() -> str:
    skus = transactions.distinct("sku")
    updated = 0
    for sku in skus:
        pipeline = [
            {"$match": {"sku": sku}},
            {"$group": {"_id": "$sku",
                        "inbound": {"$sum": {"$cond": [{"$eq": ["$type", "inbound"]}, "$qty", 0]}},
                        "outbound": {"$sum": {"$cond": [{"$eq": ["$type", "outbound"]}, "$qty", 0]}}
                        }},
            {"$project": {"sku": "$_id", "stock": {"$subtract": ["$inbound", "$outbound"]}}}
        ]
        result = list(transactions.aggregate(pipeline))
        if result:
            stock = result[0]["stock"]
            item = inventories.find_one({"sku": sku})
            if item:
                inventories.update_one({"sku": sku}, {"$set": {"qty": stock, "updatedAt": datetime.utcnow()}})
            else:
                inventories.insert_one({"sku": sku, "name": sku, "qty": stock, "uom": "EA",
                                        "wh": "UNKNOWN", "location": "UNKNOWN", "exp": None,
                                        "imageUrl": "", "updatedAt": datetime.utcnow()})
            updated += 1
    return f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ªìn kho cho {updated} SKU d·ª±a tr√™n transaction log."

# ============================================================
# Tool 9: Rebuild & Sync n√¢ng cao (to√†n b·ªô inventories)
# ============================================================
def rebuild_and_sync_inventory() -> str:
    skus = transactions.distinct("sku")
    updated = 0
    for sku in skus:
        pipeline = [
            {"$match": {"sku": sku}},
            {"$group": {"_id": "$sku",
                        "inbound": {"$sum": {"$cond": [{"$eq": ["$type", "inbound"]}, "$qty", 0]}},
                        "outbound": {"$sum": {"$cond": [{"$eq": ["$type", "outbound"]}, "$qty", 0]}}
                        }},
            {"$project": {"sku": "$_id", "stock": {"$subtract": ["$inbound", "$outbound"]}}}
        ]
        result = list(transactions.aggregate(pipeline))
        if not result: 
            continue
        stock = result[0]["stock"]
        item = inventories.find_one({"sku": sku})
        if item:
            inventories.update_one({"sku": sku}, {"$set": {"qty": stock, "updatedAt": datetime.utcnow()}})
        else:
            inventories.insert_one({"sku": sku, "name": sku, "qty": stock, "uom": "EA",
                                    "wh": "UNKNOWN", "location": "UNKNOWN", "exp": None,
                                    "imageUrl": "", "updatedAt": datetime.utcnow()})
        updated += 1
    return f"‚úÖ ƒê√£ ƒë·ªìng b·ªô v√† c·∫≠p nh·∫≠t t·ªìn kho cho {updated} SKU."

# ============================================================
# Wrapper cho c√°c Tool
# ============================================================
def stock_tool(args: str) -> str:
    sku = args.strip()
    if not sku:
        return " B·∫°n mu·ªën ki·ªÉm tra t·ªìn kho c·ªßa s·∫£n ph·∫©m n√†o? Vui l√≤ng cung c·∫•p m√£ SKU."
    return get_stock_by_sku(sku)

def transaction_history_tool(args: str) -> str:
    sku = args.strip()
    if not sku:
        return " B·∫°n mu·ªën xem l·ªãch s·ª≠ giao d·ªãch c·ªßa s·∫£n ph·∫©m n√†o? Vui l√≤ng cung c·∫•p m√£ SKU."
    return get_transaction_history(sku)

def search_transactions_tool(args: str) -> str:
    if not args.strip():
        return " B·∫°n mu·ªën t√¨m giao d·ªãch theo SKU n√†o ho·∫∑c ti√™u ch√≠ n√†o? H√£y cung c·∫•p JSON filter."
    try:
        params = json.loads(args)
    except Exception as e:
        return f" L·ªói parse input: {e}"
    return search_transactions(by=params.get("by"),
                               wh=params.get("wh"),
                               sku=params.get("sku"),
                               limit=int(params.get("limit", 10)))
def rebuild_inventory_wrapper(args: str = "") -> str:
    confirm = args.strip().lower()
    if confirm not in ["yes", "y", "ok", "ƒë·ªìng √Ω", "x√°c nh·∫≠n"]:
        return "‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën rebuild t·ªìn kho to√†n b·ªô t·ª´ transaction log kh√¥ng? Tr·∫£ l·ªùi 'yes' ƒë·ªÉ ti·∫øp t·ª•c."
    return rebuild_inventory()

def rebuild_and_sync_inventory_wrapper(args: str = "") -> str:
    confirm = args.strip().lower()
    if confirm not in ["yes", "y", "ok", "ƒë·ªìng √Ω", "x√°c nh·∫≠n"]:
        return "‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·ªìng b·ªô inventory to√†n b·ªô t·ª´ transaction log kh√¥ng? Tr·∫£ l·ªùi 'yes' ƒë·ªÉ ti·∫øp t·ª•c."
    return rebuild_and_sync_inventory()

# ============================================================
# Kh·ªüi t·∫°o danh s√°ch Tools
# ============================================================
tools = [
    #Tinh t·ªìn kho
    Tool(name="MongoDBStockChecker", func=get_stock_by_sku,
         description="T√≠nh t·ªìn kho theo SKU."),
    #T√≠nh t·ªìn kho theo t√™n s·∫£n ph·∫©m
    Tool(name="MongoDBStockByName", func=get_stock_by_name,
         description="T√≠nh t·ªìn kho theo t√™n s·∫£n ph·∫©m."),
    #L·ªãch s·ª≠ giao d·ªãch
    Tool(name="MongoDBTransactionHistory", func=get_transaction_history,
         description="Xem l·ªãch s·ª≠ giao d·ªãch theo SKU."),
    #Nh·∫≠p kho
    Tool(
        name="MongoDBInboundRecorder",
        func=inbound_tool_wrapper,
        description="Ghi nh·∫≠n nh·∫≠p kho (h·ªó tr·ª£ CSV, JSON ho·∫∑c ti·∫øng Vi·ªát)."
    ),
    #Xu·∫•t kho
    Tool(
       name="MongoDBInboundRecorder",
       func=outbound_tool_wrapper,
       description="Ghi nh·∫≠n xu·∫•t kho (h·ªó tr·ª£ CSV, JSON ho·∫∑c ti·∫øng Vi·ªát)."
    ),
    Tool(name="MongoDBTransactionSearcher", func=search_transactions_tool,
         description="T√¨m ki·∫øm transaction theo filter JSON."),
    Tool(name="MongoDBRebuildInventory", func=rebuild_inventory,
         description="Rebuild t·ªìn kho t·ª´ transaction log."),
    Tool(name="MongoDBRebuildAndSyncInventory", func=rebuild_and_sync_inventory,
         description="ƒê·ªìng b·ªô t·ªìn kho to√†n b·ªô."),
    # Wrapper Tools ƒë·ªÉ h·ªèi l·∫°i khi user thi·∫øu input
    Tool(name="MongoDBStockCheckerWrapper", func=stock_tool,
         description="Ki·ªÉm tra t·ªìn kho. N·∫øu thi·∫øu SKU th√¨ h·ªèi l·∫°i."),
    Tool(name="MongoDBTransactionHistoryWrapper", func=transaction_history_tool,
         description="Xem l·ªãch s·ª≠ giao d·ªãch. N·∫øu thi·∫øu SKU th√¨ h·ªèi l·∫°i."),
    Tool(name="MongoDBSearchTransactionsWrapper", func=search_transactions_tool,
         description="T√¨m giao d·ªãch. N·∫øu thi·∫øu JSON filter th√¨ h·ªèi l·∫°i."),
    Tool(name="MongoDBInboundRecorderWrapper", func=inbound_tool_wrapper,
         description="Ghi nh·∫≠n nh·∫≠p kho. N·∫øu thi·∫øu tham s·ªë th√¨ h·ªèi l·∫°i."),
    Tool(name="MongoDBOutboundRecorderWrapper", func=outbound_tool_wrapper,
         description="Ghi nh·∫≠n xu·∫•t kho. N·∫øu thi·∫øu tham s·ªë th√¨ h·ªèi l·∫°i."),
    Tool(name="MongoDBRebuildInventoryWrapper", func=rebuild_inventory_wrapper,
         description="Rebuild t·ªìn kho. N·∫øu user ch∆∞a x√°c nh·∫≠n th√¨ h·ªèi l·∫°i."),
    Tool(name="MongoDBRebuildAndSyncInventoryWrapper", func=rebuild_and_sync_inventory_wrapper,
         description="ƒê·ªìng b·ªô t·ªìn kho. N·∫øu user ch∆∞a x√°c nh·∫≠n th√¨ h·ªèi l·∫°i."),
]

# ============================================================
# Kh·ªüi t·∫°o LLM & Agent
# ============================================================
llm = ChatGroq(model=GROQ_MODEL, groq_api_key=GROQ_API_KEY, temperature=0)

agent = initialize_agent(
    tools,
    llm,
    agent="zero-shot-react-description",
    verbose=True,
    handle_parsing_errors=True,   # tr√°nh crash
    return_intermediate_steps=False
)


print("‚úÖ Agent ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng"),
