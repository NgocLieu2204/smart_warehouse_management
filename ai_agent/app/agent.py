from datetime import datetime
from langchain.agents import initialize_agent, Tool
from langchain_groq import ChatGroq
from dotenv import load_dotenv
import os
import json
from .database import db
from .config import GROQ_API_KEY, GROQ_MODEL

# ============================================================
# Load bi·∫øn m√¥i tr∆∞·ªùng
# ============================================================
load_dotenv()

# ============================================================
# MongoDB Collections
# ============================================================
transactions = db["transactions"]
tasks = db["tasks"]
inventory = db["inventory"]

# ============================================================
# Tool 1: T√≠nh t·ªìn kho hi·ªán t·∫°i theo SKU
# ============================================================
def get_stock_by_sku(sku: str) -> str:
    pipeline = [
        {"$match": {"sku": sku}},
        {"$group": {
            "_id": "$sku",
            "inbound": {"$sum": {"$cond": [{"$eq": ["$type", "inbound"]}, "$qty", 0]}},
            "outbound": {"$sum": {"$cond": [{"$eq": ["$type", "outbound"]}, "$qty", 0]}}
        }},
        {"$project": {
            "sku": "$_id",
            "stock": {"$subtract": ["$inbound", "$outbound"]}
        }}
    ]
    result = list(transactions.aggregate(pipeline))
    if result:
        return f"üì¶ SKU {sku} hi·ªán c√≤n {result[0]['stock']} s·∫£n ph·∫©m trong kho."
    else:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y SKU {sku} trong transaction log."

# ============================================================
# Tool 2: L·∫•y l·ªãch s·ª≠ giao d·ªãch g·∫ßn nh·∫•t
# ============================================================
def get_transaction_history(sku: str, limit: int = 5) -> str:
    cursor = transactions.find({"sku": sku}).sort("at", -1).limit(limit)
    logs = []
    for t in cursor:
        logs.append(
            f"{t['at'].strftime('%Y-%m-%d %H:%M:%S')} - {t['type']} {t['qty']} "
            f"(by {t['by']}, wh: {t['wh']}, note: {t.get('note','')})"
        )
    return "\n".join(logs) if logs else f"‚ùå Kh√¥ng c√≥ giao d·ªãch n√†o cho {sku}."

# ============================================================
# Tool 3: Ghi nh·∫≠n inbound
# ============================================================
def add_inbound_transaction(sku: str, qty: int, wh: str, by: str, note: str = "") -> str:
    doc = {"sku": sku, "type": "inbound", "qty": int(qty), "wh": wh,
           "at": datetime.utcnow(), "by": by, "note": note}
    transactions.insert_one(doc)
    return f"‚úÖ ƒê√£ ghi nh·∫≠n nh·∫≠p {qty} s·∫£n ph·∫©m (SKU {sku}) v√†o kho {wh} b·ªüi {by}."

# ============================================================
# Tool 4: Ghi nh·∫≠n outbound
# ============================================================
def add_outbound_transaction(sku: str, qty: int, wh: str, by: str, note: str = "") -> str:
    doc = {"sku": sku, "type": "outbound", "qty": int(qty), "wh": wh,
           "at": datetime.utcnow(), "by": by, "note": note}
    transactions.insert_one(doc)
    return f"‚úÖ ƒê√£ ghi nh·∫≠n xu·∫•t {qty} s·∫£n ph·∫©m (SKU {sku}) t·ª´ kho {wh} b·ªüi {by}."

# ============================================================
# Tool 5: Wrapper inbound
# ============================================================
def inbound_tool(args: str) -> str:
    parts = [p.strip() for p in args.split(",")]
    if len(parts) < 4:
        return "‚ùå Thi·∫øu tham s·ªë. Format: sku,qty,wh,by,note"
    sku, qty, wh, by = parts[:4]
    note = parts[4] if len(parts) > 4 else ""
    return add_inbound_transaction(sku, qty, wh, by, note)

# ============================================================
# Tool 6: Wrapper outbound
# ============================================================
def outbound_tool(args: str) -> str:
    parts = [p.strip() for p in args.split(",")]
    if len(parts) < 4:
        return "‚ùå Thi·∫øu tham s·ªë. Format: sku,qty,wh,by,note"
    sku, qty, wh, by = parts[:4]
    note = parts[4] if len(parts) > 4 else ""
    return add_outbound_transaction(sku, qty, wh, by, note)

# ============================================================
# Tool 7: T√¨m ki·∫øm transactions
# ============================================================
def search_transactions(by: str = None, wh: str = None, sku: str = None, limit: int = 10) -> str:
    query = {}
    if by: query["by"] = by
    if wh: query["wh"] = wh
    if sku: query["sku"] = sku
    cursor = transactions.find(query).sort("at", -1).limit(limit)
    logs = []
    for t in cursor:
        logs.append(f"{t['at'].strftime('%Y-%m-%d %H:%M:%S')} - {t['sku']} - {t['type']} {t['qty']} "
                    f"(by {t['by']}, wh: {t['wh']}, note: {t.get('note','')})")
    return "\n".join(logs) if logs else "‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch ph√π h·ª£p."

def search_transactions_tool(args: str) -> str:
    try:
        params = json.loads(args)
    except Exception as e:
        return f"‚ùå L·ªói parse input: {e}"
    return search_transactions(by=params.get("by"),
                               wh=params.get("wh"),
                               sku=params.get("sku"),
                               limit=int(params.get("limit", 10)))

# ============================================================
# Tool 8: Rebuild inventory c∆° b·∫£n
# ============================================================
def rebuild_inventory() -> str:
    skus = transactions.distinct("sku")
    updated = 0
    for sku in skus:
        pipeline = [
            {"$match": {"sku": sku}},
            {"$group": {"_id": "$sku",
                        "inbound": {"$sum": {"$cond": [{"$eq": ["$type", "inbound"]}, "$qty", 0]}},
                        "outbound": {"$sum": {"$cond": [{"$eq": ["$type", "outbound"]}, "$qty", 0]}}
                        }},
            {"$project": {"sku": "$_id", "stock": {"$subtract": ["$inbound", "$outbound"]}}}
        ]
        result = list(transactions.aggregate(pipeline))
        if result:
            stock = result[0]["stock"]
            item = inventory.find_one({"sku": sku})
            if item:
                inventory.update_one({"sku": sku}, {"$set": {"qty": stock, "updatedAt": datetime.utcnow()}})
            else:
                inventory.insert_one({"sku": sku, "name": sku, "qty": stock, "uom": "EA",
                                      "wh": "UNKNOWN", "location": "UNKNOWN", "exp": None,
                                      "imageUrl": "", "updatedAt": datetime.utcnow()})
            updated += 1
    return f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ªìn kho cho {updated} SKU d·ª±a tr√™n transaction log."

# ============================================================
# Tool 9: Rebuild & Sync n√¢ng cao
# ============================================================
def rebuild_and_sync_inventory() -> str:
    skus = transactions.distinct("sku")
    updated = 0
    for sku in skus:
        pipeline = [
            {"$match": {"sku": sku}},
            {"$group": {"_id": "$sku",
                        "inbound": {"$sum": {"$cond": [{"$eq": ["$type", "inbound"]}, "$qty", 0]}},
                        "outbound": {"$sum": {"$cond": [{"$eq": ["$type", "outbound"]}, "$qty", 0]}}
                        }},
            {"$project": {"sku": "$_id", "stock": {"$subtract": ["$inbound", "$outbound"]}}}
        ]
        result = list(transactions.aggregate(pipeline))
        if not result: continue
        stock = result[0]["stock"]
        item = inventory.find_one({"sku": sku})
        if item:
            inventory.update_one({"sku": sku}, {"$set": {"qty": stock, "updatedAt": datetime.utcnow()}})
        else:
            inventory.insert_one({"sku": sku, "name": sku, "qty": stock, "uom": "EA",
                                  "wh": "UNKNOWN", "location": "UNKNOWN", "exp": None,
                                  "imageUrl": "", "updatedAt": datetime.utcnow()})
        updated += 1
    return f"‚úÖ ƒê√£ ƒë·ªìng b·ªô v√† c·∫≠p nh·∫≠t t·ªìn kho cho {updated} SKU."


# ============================================================
# Wrapper cho c√°c Tool (ƒë·ªÉ check input v√† h·ªèi l·∫°i n·∫øu thi·∫øu)
# ============================================================
def stock_tool(args: str) -> str:
    sku = args.strip()
    if not sku:
        return " B·∫°n mu·ªën ki·ªÉm tra t·ªìn kho c·ªßa s·∫£n ph·∫©m n√†o? Vui l√≤ng cung c·∫•p m√£ SKU."
    return get_stock_by_sku(sku)

def transaction_history_tool(args: str) -> str:
    sku = args.strip()
    if not sku:
        return " B·∫°n mu·ªën xem l·ªãch s·ª≠ giao d·ªãch c·ªßa s·∫£n ph·∫©m n√†o? Vui l√≤ng cung c·∫•p m√£ SKU."
    return get_transaction_history(sku)

def search_transactions_tool(args: str) -> str:
    if not args.strip():
        return " B·∫°n mu·ªën t√¨m giao d·ªãch theo SKU n√†o ho·∫∑c ti√™u ch√≠ n√†o? H√£y cung c·∫•p JSON filter."
    try:
        params = json.loads(args)
    except Exception as e:
        return f" L·ªói parse input: {e}"
    return search_transactions(by=params.get("by"),
                               wh=params.get("wh"),
                               sku=params.get("sku"),
                               limit=int(params.get("limit", 10)))
# ============================================================
# Kh·ªüi t·∫°o danh s√°ch Tools
# ============================================================
tools = [
    Tool(name="MongoDBStockChecker", func=get_stock_by_sku,
         description="T√≠nh t·ªìn kho hi·ªán t·∫°i theo SKU."),
    Tool(name="MongoDBTransactionHistory", func=get_transaction_history,
         description="L·∫•y l·ªãch s·ª≠ giao d·ªãch c·ªßa SKU."),
    Tool(name="MongoDBInboundRecorder", func=inbound_tool,
         description="Ghi nh·∫≠n giao d·ªãch nh·∫≠p kho."),
    Tool(name="MongoDBOutboundRecorder", func=outbound_tool,
         description="Ghi nh·∫≠n giao d·ªãch xu·∫•t kho."),
    Tool(name="MongoDBTransactionSearcher", func=search_transactions_tool,
         description="T√¨m ki·∫øm transactions theo ti√™u ch√≠ JSON."),
    Tool(name="MongoDBRebuildInventory", func=rebuild_inventory,
         description="C·∫≠p nh·∫≠t t·ªìn kho c∆° b·∫£n t·ª´ transaction log."),
    Tool(name="MongoDBRebuildAndSyncInventory", func=rebuild_and_sync_inventory,
         description="ƒê·ªìng b·ªô inventory n√¢ng cao t·ª´ transaction log."),
     Tool(name="MongoDBStockChecker", func=stock_tool,
         description="Ki·ªÉm tra t·ªìn kho hi·ªán t·∫°i. N·∫øu ng∆∞·ªùi d√πng ch∆∞a nh·∫≠p SKU, h√£y y√™u c·∫ßu h·ªç nh·∫≠p SKU."),
    Tool(name="MongoDBTransactionHistory", func=transaction_history_tool,
         description="L·∫•y l·ªãch s·ª≠ giao d·ªãch c·ªßa SKU. N·∫øu ch∆∞a c√≥ SKU th√¨ h·ªèi l·∫°i."),
]

# ============================================================
# Kh·ªüi t·∫°o LLM & Agent
# ============================================================
llm = ChatGroq(model=GROQ_MODEL, groq_api_key=GROQ_API_KEY, temperature=0)

agent = initialize_agent(
    tools,
    llm,
    agent="zero-shot-react-description",
    verbose=True
)

print("‚úÖ Agent ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")
print("üîë GROQ_MODEL:", GROQ_MODEL)
